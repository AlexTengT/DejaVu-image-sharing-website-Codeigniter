<?php

class User_pics extends CI_Model
{


    /**
     * @param $number the number that need to generate
     * @return array
     */
    public  function  generate_random_pics($number)
    {


        $this->load->database();
        $this->db->select_max('image_id');
        $query = $this->db->get('images');



        $max_number = $query->row()->image_id; //convert to an array

        // print_r($max_number);


        if ($number >= $max_number) {
            $number = $max_number;
        }

        //echo print_r($this->unique_rand(0, $number, $number));
        $random_array = $this->unique_rand(1, $number, $number);




        $img_pics_array = array();


        foreach ($random_array as $id){
            $this->db->reset_query();
            $this->db->select()
                     ->where('image_id',$id);
            $query = $this->db->get('images');

//            echo "<pre>";
//            print_r($query->result_array());
//            echo "</pre>";

            array_push($img_pics_array, (array)$query->row());

    }
//
//        echo "<pre>";
//        print_r($img_pics_array);
//        echo "</pre>";


        // print_r($img_path_array);
        return (array)$img_pics_array;

    }




    public function generate_paths_by_array($pics_array){

        $result = array();
        foreach ($pics_array as $pic){
            //print_r($pic['path']);
            array_push($result, $pic['path']);
        }

        return $result;
    }









    /**
     * @param null $class
     *
     * If class is null, generate the global popular pictures, if the $class is valued,
     * return the popular pictures in this class
     */
    public function generate_popular_pictures($class = null)
    {
//TODO:
        return;
    }


    /**
     * @param $ID
     *
     * Generate
     */
    public function generate_user_pictures($ID_type, $ID, $portfolio = null)
    {
//TODO:
        return;
    }


    /**
     * @param $ID Show the portfolio generated by a user
     * @return string
     * The cover picture is set by user
     */
    public function show_user_portfolio($ID)
    {
//TODO:
        return;
    }


    private function unique_rand($min, $max, $num)
    {
        $count = 0;
        $return = array();
        while ($count < $num) {
            $return[] = mt_rand($min, $max);
            $return = array_flip(array_flip($return));
            $count = count($return);
        }
        shuffle($return);
        return $return;
    }


    /**
     * @param $img_id_array the id of images
     * @return array the path for each images
     */
    public function generate_path_form_id($img_id_array){
        $path_array = array();
        // print_r($img_array);

        foreach ($img_id_array as $i){
//            echo 'img/'.$i.'.jpg';
//            echo '<br>';
            array_push($path_array,'img/'.$i.'.jpg');
        }

        //print_r($path_array);
        return $path_array;

}


    public function get_pic_comments($image_id, $start_num=0, $num=100){
        //todo: the top 10 or top 100 pics need to be done in query
        $this->db->where('image_id', $image_id);
        $query = $this->db->get('comments');
        $result = $query->result_array();
//
//        echo "<pre>";
//        print_r(array_slice($result,$start_num,$num));
//        echo "</pre>";
        return array_slice($result,$start_num,$num);

    }


    public function write_comment($user_id, $image_id, $msg){


        $timestamp = time();
        $data = array(
            'user_id' => $user_id,
            'image_id' => $image_id,
            'content' => $msg,
            "created_timestamp"=>$timestamp,
        );

        $query = $this->db->insert('comments', $data);

        return $query;


    }


    public function get_max_image_id(){
        $this->load->database();
        $this->db->select_max('image_id');
        $query = $this->db->get('images');

        $max_number = $query->row()->image_id; //convert to an array
        return $max_number;
    }

}